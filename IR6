{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "12102f5e-f59d-41c5-82d3-0d71b78cbc6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "574d167a-413d-4232-95cf-0b092a71b950",
   "metadata": {},
   "outputs": [],
   "source": [
    "pages = {\n",
    "    \"https://www.python.org\": [],\n",
    "    \"https://docs.python.org/3/\": [],\n",
    "    \"https://pypi.org/\": [],\n",
    "    \"https://www.djangoproject.com/\": []\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "be444c17-80d8-4bb8-a218-a2105732e9be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fetching links from: https://www.python.org\n",
      "Fetching links from: https://docs.python.org/3/\n",
      "Fetching links from: https://pypi.org/\n",
      "Fetching links from: https://www.djangoproject.com/\n"
     ]
    }
   ],
   "source": [
    "for page in pages.keys():\n",
    "    try:\n",
    "        print(f\"Fetching links from: {page}\")\n",
    "        response = requests.get(page, timeout=10)\n",
    "        soup = BeautifulSoup(response.text, \"html.parser\")\n",
    "        links = [a['href'] for a in soup.find_all('a', href=True)]\n",
    "        \n",
    "        links = [link for link in links \n",
    "                 if link.startswith(\"https://www.python.org\") \n",
    "                 or link.startswith(\"https://docs.python.org\")\n",
    "                 or link.startswith(\"https://pypi.org\")\n",
    "                 or link.startswith(\"https://www.djangoproject.com\")]\n",
    "        pages[page] = links\n",
    "    except Exception as e:\n",
    "        print(f\"Error fetching {page}: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "24538031-5e44-4d12-b307-f980380be6a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = len(pages)\n",
    "page_list = list(pages.keys())\n",
    "link_matrix = np.zeros((n, n))\n",
    "\n",
    "for i, page in enumerate(page_list):\n",
    "    links = pages[page]\n",
    "    if len(links) > 0:\n",
    "        for link in links:\n",
    "            if link in page_list:\n",
    "                j = page_list.index(link)\n",
    "                link_matrix[j][i] = 1 / len(links)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "659c6a17-6a14-4b12-bc85-4bdab5b4c1dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final PageRank Scores:\n",
      "https://www.python.org: 0.0375\n",
      "https://docs.python.org/3/: 0.0375\n",
      "https://pypi.org/: 0.0415\n",
      "https://www.djangoproject.com/: 0.0385\n"
     ]
    }
   ],
   "source": [
    "damping_factor = 0.85\n",
    "num_iterations = 100\n",
    "rank = np.ones(n) / n\n",
    "\n",
    "for _ in range(num_iterations):\n",
    "    rank = (1 - damping_factor) / n + damping_factor * link_matrix.dot(rank)\n",
    "\n",
    "print(\"\\nFinal PageRank Scores:\")\n",
    "for i, page in enumerate(page_list):\n",
    "    print(f\"{page}: {rank[i]:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5107f836-601f-46f3-b210-de2bbc0ffaa4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

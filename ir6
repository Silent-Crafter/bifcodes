{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6f301c77-d109-4864-91a7-a66d68a8e376",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Graph (adjacency list):\n",
      "{'A': ['B', 'C'], 'B': ['C', 'A'], 'C': ['A'], 'D': ['C']}\n",
      "\n",
      "PageRank Scores:\n",
      "A: 0.4135\n",
      "C: 0.3357\n",
      "B: 0.2132\n",
      "D: 0.0375\n"
     ]
    }
   ],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "\n",
    "pages = {\n",
    "    'A': '''\n",
    "    <html>\n",
    "    <body>\n",
    "    <a href=\"B\">Go to B</a>\n",
    "    <a href=\"C\">Go to C</a>\n",
    "    </body>\n",
    "    </html>\n",
    "    ''',\n",
    "    'B': '''\n",
    "    <html>\n",
    "    <body>\n",
    "    <a href=\"C\">Go to C</a>\n",
    "    <a href=\"A\">Go to A</a>\n",
    "    </body>\n",
    "    </html>\n",
    "    ''',\n",
    "    'C': '''\n",
    "    <html>\n",
    "    <body>\n",
    "    <a href=\"A\">Go to A</a>\n",
    "    </body>\n",
    "    </html>\n",
    "    ''',\n",
    "    'D': '''\n",
    "    <html>\n",
    "    <body>\n",
    "    <a href=\"C\">Go to C</a>\n",
    "    </body>\n",
    "    </html>\n",
    "    '''\n",
    "}\n",
    "\n",
    "graph = {}\n",
    "for page, html in pages.items():\n",
    "    soup = BeautifulSoup(html, 'html.parser')\n",
    "    links = [a['href'] for a in soup.find_all('a', href=True)]\n",
    "    graph[page] = [link for link in links if link in pages]  # Filter to internal links only\n",
    "\n",
    "def pagerank(graph, d=0.85, tol=1e-6, max_iter=100):\n",
    "    \"\"\"\n",
    "    Compute PageRank scores for the graph.\n",
    "    \n",
    "    Args:\n",
    "    - graph: Dict of {node: [outgoing_neighbors]}\n",
    "    - d: Damping factor (0 < d < 1)\n",
    "    - tol: Convergence tolerance\n",
    "    - max_iter: Max iterations\n",
    "    \n",
    "    Returns:\n",
    "    - Dict of {node: PageRank score}\n",
    "    \"\"\"\n",
    "    nodes = list(graph.keys())\n",
    "    N = len(nodes)\n",
    "    pr = {node: 1.0 / N for node in nodes}\n",
    "    out_deg = {node: len(graph[node]) if len(graph[node]) > 0 else 1 for node in nodes}  # Avoid div by zero\n",
    "    \n",
    "    for _ in range(max_iter):\n",
    "        new_pr = {node: (1 - d) / N for node in nodes}\n",
    "        for node in nodes:\n",
    "            for neighbor in graph[node]:\n",
    "                new_pr[neighbor] += d * (pr[node] / out_deg[node])\n",
    "        diff = sum(abs(new_pr[node] - pr[node]) for node in nodes)\n",
    "        pr = new_pr\n",
    "        if diff < tol:\n",
    "            break\n",
    "    \n",
    "    return pr\n",
    "\n",
    "ranks = pagerank(graph)\n",
    "\n",
    "print(\"Graph (adjacency list):\")\n",
    "print(graph)\n",
    "print(\"\\nPageRank Scores:\")\n",
    "for node, score in sorted(ranks.items(), key=lambda x: x[1], reverse=True):\n",
    "    print(f\"{node}: {score:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f32dd1f-e6f1-4c6f-8857-5501bd69f59f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
